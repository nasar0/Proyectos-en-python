# -*- coding: utf-8 -*-
"""car+++.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EqrK0C4nj9kWGJR_ygn3TO-V43G1do-3
"""

import pandas as pd
from sklearn.linear_model import Ridge, Lasso
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline
import matplotlib.pyplot as plt

# Cargar los datos
url = "https://raw.githubusercontent.com/murpi/wilddata/master/quests/cars.csv"
df = pd.read_csv(url)
df = df[["mpg", "cylinders", "hp", "weightlbs"]].dropna()

# Separar variables
X = df[["cylinders", "hp", "weightlbs"]]
y = df["mpg"]

# Dividir en entrenamiento y test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Crear pipelines para Ridge y Lasso
pipeline_ridge = make_pipeline(StandardScaler(), Ridge())
pipeline_lasso = make_pipeline(StandardScaler(), Lasso())

# Definir los valores de alpha a probar
ridge_grid = {'ridge__alpha': [0.001, 0.01, 0.1, 1, 10, 100]}
lasso_grid = {'lasso__alpha': [0.001, 0.01, 0.1, 1, 10, 100]}

# Búsqueda de hiperparámetros con GridSearchCV
ridge_search = GridSearchCV(pipeline_ridge, ridge_grid, cv=5)
lasso_search = GridSearchCV(pipeline_lasso, lasso_grid, cv=5)

# Ajustar los modelos
ridge_search.fit(X_train, y_train)
lasso_search.fit(X_train, y_train)

# Predicciones
y_pred_ridge = ridge_search.predict(X_test)
y_pred_lasso = lasso_search.predict(X_test)

# Resultados
print("Mejores parámetros para Ridge:", ridge_search.best_params_)
print("Mejores parámetros para Lasso:", lasso_search.best_params_)
print("Score en CV Ridge:", ridge_search.best_score_)
print("Score en CV Lasso:", lasso_search.best_score_)

# Métricas en test
print("\nResultados en test:")
print(f"Ridge - MSE: {mean_squared_error(y_test, y_pred_ridge):.2f}, R2: {r2_score(y_test, y_pred_ridge):.2f}")
print(f"Lasso - MSE: {mean_squared_error(y_test, y_pred_lasso):.2f}, R2: {r2_score(y_test, y_pred_lasso):.2f}")

# Visualizar predicciones Ridge
plt.scatter(y_test, y_pred_ridge)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel("Valor real MPG")
plt.ylabel("Predicción Ridge")
plt.title("Ridge: Real vs Predicho")
plt.grid(True)
plt.show()

# Visualizar predicciones Lasso
plt.scatter(y_test, y_pred_lasso)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel("Valor real MPG")
plt.ylabel("Predicción Lasso")
plt.title("Lasso: Real vs Predicho")
plt.grid(True)
plt.show()